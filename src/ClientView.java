import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
/*
File name: 	ClientView.java
Author: 	Amaury Diaz Diaz, 040-738-985
Course: 	CST8221 – JAP, Lab Section: 302
Assignment: 2.2
Date: 		December 10th 2015
Professor:  Svillen Ranev
Purpose: 	Creates the CLient GUI 
*/

/**
 * Creates the Client GUI
 * 
 * @author Amaury Diaz Diaz
 * @version 1.0
 * @see java.awt.event.ActionEvent
 * @see java.awt.event.ActionListener
 * @see java.io.IOException
 * @see java.io.ObjectInputStream
 * @see java.io.ObjectOutputStream
 * @see java.net.InetAddress
 * @see java.net.InetSocketAddress
 * @see java.net.Socket
 * @see java.net.SocketTimeoutException
 * @see java.net.UnknownHostException
 * @see java.awt.Color
 * @since 1.8.0_20
 *
 */
public class ClientView extends javax.swing.JFrame {

	/**
	 * Creates new form ClientView
	 */
	public ClientView() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		java.security.Security.setProperty("networkaddress.cache.negative.ttl" , "0");
		connectionPanel = new javax.swing.JPanel();
		hostLabel = new javax.swing.JLabel();
		portLabel = new javax.swing.JLabel();
		localHostText = new javax.swing.JTextField();
		portComboBox = new javax.swing.JComboBox<>();
		connectButton = new javax.swing.JButton();
		clientPanel = new javax.swing.JPanel();
		clientRequestText = new javax.swing.JTextField();
		sendButton = new javax.swing.JButton();
		terminalPanel = new javax.swing.JPanel();
		scrollPane = new javax.swing.JScrollPane();
		textArea = new javax.swing.JTextArea();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setMinimumSize(new java.awt.Dimension(600, 550));

		connectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
				javax.swing.BorderFactory.createLineBorder(new java.awt.Color(
						255, 0, 0), 11), "SET CONNECTION",
				javax.swing.border.TitledBorder.LEFT,
				javax.swing.border.TitledBorder.TOP, new java.awt.Font(
						"Tahoma", 1, 11))); // NOI18N

		hostLabel.setDisplayedMnemonic('H');
		hostLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		hostLabel.setLabelFor(localHostText);
		hostLabel.setText("Host:");
		hostLabel.setPreferredSize(new java.awt.Dimension(40, 40));

		portLabel.setDisplayedMnemonic('P');
		portLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		portLabel.setLabelFor(portComboBox);
		portLabel.setText("Port:");
		portLabel.setPreferredSize(new java.awt.Dimension(40, 40));

		localHostText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
		localHostText.setText(" localhost");
		localHostText.setCaretPosition(1);
		localHostText.setSelectionEnd(1);
		

		portComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(
				new String[] { "", "8088", "65000", "65535" }));
		portComboBox.setBorder(null);
		portComboBox.setBackground(Color.WHITE);
		portComboBox.setPreferredSize(new java.awt.Dimension(80, 25));
		portComboBox.setEditable(true);
		
		connectButton.setBackground(new java.awt.Color(255, 0, 0));
		connectButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		connectButton.setMnemonic('C');
		connectButton.setText("Connect");
		connectButton.setPreferredSize(new java.awt.Dimension(80, 25));
		connectButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				/*Port got from the client GUI to connect to the server*/
				int port;
				/*Host got from the client GUI to connect to the server*/
				String host;
				/*Check that the item in the combo box is a correct port number*/
				try {
					port = Integer.valueOf((String) portComboBox.getSelectedItem());
				} catch (NumberFormatException ex) {
					textArea.setText("CLIENT>ERROR: Wrong port Number.");
					return;
				}
				host = localHostText.getText().trim();
				
				try {
					
					try{
						client = new Socket();
						/*Connect the client using the InetAddress gotten by the host and the 
						 the current port with a timeout of a second in case the connection cannot
						 be performed*/
						client.connect(new InetSocketAddress(InetAddress.getByName(host), port),1000);
					}
					/*If the hostname entered was incorrect*/
					catch(UnknownHostException ex){
						textArea.setText("CLIENT>ERROR: Unknown Host");
						return;
					}
					/*If the timeout expired*/
					catch(SocketTimeoutException ex){
						textArea.setText("CLIENT>ERROR: Connection Refused server is not available. Check port or restart server.");
						return;
					}
					/*Initialize the streams*/
					output = new ObjectOutputStream(client.getOutputStream());
					input = new ObjectInputStream(client.getInputStream());
				} 
				/*In case a connection cannot be established with the server*/
				catch (IOException ex) {
					textArea.setText("CLIENT>ERROR: OH OH Something went really wrong");
					return;
				}
				/*Disable the connect button*/
				connectButton.setEnabled(false);
				connectButton.setBackground(Color.BLUE);
				/*Enable the Send button*/
				sendButton.setEnabled(true);
				/*Show the established connection*/
				textArea.setText("Connected to " + client);
			}
		});

		javax.swing.GroupLayout connectionPanelLayout = new javax.swing.GroupLayout(
				connectionPanel);
		connectionPanel.setLayout(connectionPanelLayout);
		connectionPanelLayout
				.setHorizontalGroup(connectionPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								connectionPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												connectionPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																hostLabel,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																portLabel,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												connectionPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																connectionPanelLayout
																		.createSequentialGroup()
																		.addComponent(
																				portComboBox,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				88,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addComponent(
																				connectButton,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				95,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addContainerGap())
														.addComponent(
																localHostText))));
		connectionPanelLayout
				.setVerticalGroup(connectionPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								connectionPanelLayout
										.createSequentialGroup()
										.addGroup(
												connectionPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																connectionPanelLayout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(
																				localHostText,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
														.addComponent(
																hostLabel,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												connectionPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																portComboBox,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																connectButton,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																portLabel,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))));

		clientPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
				javax.swing.BorderFactory.createLineBorder(new java.awt.Color(
						0, 0, 0), 11), "CLIENT REQUEST",
				javax.swing.border.TitledBorder.LEFT,
				javax.swing.border.TitledBorder.TOP, new java.awt.Font(
						"Tahoma", 1, 11))); // NOI18N

		clientRequestText.setText("Type a server request line");
		clientRequestText.setPreferredSize(new java.awt.Dimension(0, 25));
		

		sendButton.setMnemonic('S');
		sendButton.setText("Send");
		sendButton.setDefaultCapable(false);
		sendButton.setEnabled(false);
		sendButton.setPreferredSize(new java.awt.Dimension(0, 25));
		sendButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				/*Command expressing the client request*/
				String clientRequest;
				/*Response from the server*/
				String serverResponse;
				/*Write the command issued by the client in an output stream*/
				try {
					clientRequest = clientRequestText.getText();
					output.writeObject(clientRequest);

				} catch (IOException ex) {
					textArea.append("CLIENT>ERROR: Could not write to the server");
					return;
				}
				/*Get the response from the serve via input stream*/
				try {
					serverResponse = (String) input.readObject();
				} catch (IOException | ClassNotFoundException ex) {
					textArea.setText("CLIENT>ERROR: Could not read the response.");
					return;
				}
				/*In case the server response is cls clear the text area*/
				if (serverResponse.equals("cls")) {
					textArea.setText("");
					return;
				} 
				/*If the server response is connection closed close al the resources
				 * and reset the GUI accordingly*/
				else if (serverResponse.equals("SERVER>Connection closed.")) {
					try {
						output.close();
						input.close();
						client.close();
						textArea.append("\n"+serverResponse);
						textArea.append("\n" + "CLIENT>Connection closed.");
						sendButton.setEnabled(false);
						connectButton.setEnabled(true);
						connectButton.setBackground(Color.RED);
						return;
					} catch (IOException ex) {
						textArea.append("\n" + "CLIENT>ERROR: Connection cannot be closed");
					}
				}
				/*Otherwise keep appending the server response in the text area*/
				textArea.append("\n" + serverResponse);
			}
		});

		javax.swing.GroupLayout clientPanelLayout = new javax.swing.GroupLayout(
				clientPanel);
		clientPanel.setLayout(clientPanelLayout);
		clientPanelLayout
				.setHorizontalGroup(clientPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								clientPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												clientRequestText,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												447,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(
												sendButton,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												83,
												javax.swing.GroupLayout.PREFERRED_SIZE)));
		clientPanelLayout
				.setVerticalGroup(clientPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								clientPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												clientPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																clientRequestText,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																sendButton,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		terminalPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
				javax.swing.BorderFactory.createLineBorder(new java.awt.Color(
						0, 0, 255), 11), "TERMINAL",
				javax.swing.border.TitledBorder.CENTER,
				javax.swing.border.TitledBorder.TOP, new java.awt.Font(
						"Tahoma", 1, 11))); // NOI18N

		scrollPane
				.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

		textArea.setColumns(20);
		textArea.setRows(25);
		scrollPane.setViewportView(textArea);

		javax.swing.GroupLayout terminalPanelLayout = new javax.swing.GroupLayout(
				terminalPanel);
		terminalPanel.setLayout(terminalPanelLayout);
		terminalPanelLayout.setHorizontalGroup(terminalPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(scrollPane));
		terminalPanelLayout.setVerticalGroup(terminalPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE,
						252, Short.MAX_VALUE));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addGap(0, 0, 0)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(
														connectionPanel,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														terminalPanel,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														clientPanel,
														javax.swing.GroupLayout.Alignment.LEADING,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addGap(0, 0, 0)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup()
						.addComponent(connectionPanel,
								javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, 0)
						.addComponent(clientPanel,
								javax.swing.GroupLayout.PREFERRED_SIZE, 72,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, 0)
						.addComponent(terminalPanel,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE).addGap(3, 3, 3)));

		pack();
	}// </editor-fold>


	// Variables declaration - do not modify
	private javax.swing.JPanel clientPanel;
	private javax.swing.JButton connectButton;
	private javax.swing.JPanel connectionPanel;
	private javax.swing.JLabel hostLabel;
	private javax.swing.JTextField localHostText;
	private javax.swing.JComboBox<String> portComboBox;
	private javax.swing.JLabel portLabel;
	private javax.swing.JScrollPane scrollPane;
	private javax.swing.JButton sendButton;
	private javax.swing.JTextField clientRequestText;
	private javax.swing.JPanel terminalPanel;
	private javax.swing.JTextArea textArea;
	private Socket client;
	private ObjectOutputStream output;
	private ObjectInputStream input;

	// End of variables declaration
}